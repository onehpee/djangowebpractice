Django is a high-level Python Web framework that encourages rapid development and clean pragmatic design.
A Web framework is a set of components that provide a standard way to develop websites fast and easily.

Django’s primary goal is to ease the creation of complex database-driven websites.
Some well known sites that use Django include PBS, Instagram, Disqus, Washington Times, Bitbucket and Mozilla.



The second reason you should learn Django is the scope of its features. If you need to build a website, you don’t need to rely on any external libraries or packages if you choose Django. 
This means that you don’t need to learn how to use anything else, and the syntax is seamless as you’re using only one framework.

There’s also the added benefit that you don’t need to worry that updating one library or framework will render others that you’ve installed useless. 
If you do find yourself needing to add extra features, there are a range of external libraries that you can use to enhance your site.



Django offers a wide range of built-in features and utilities. Make the most of them before reinventing the wheel.
For example, use Django's authentication system, form handling, and database models.
Leveraging these built-in tools not only saves you time but also ensures that you benefit from established best practices.

from django.contrib.auth.models import User
from django import forms

# Using Django's built-in User model and form
class UserForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ('username', 'email', 'password')


Testing is a critical aspect of Django development. It's not only about ensuring that your code works but also about maintaining 
its functionality over time. Write comprehensive unit tests and integration tests to cover your application's critical paths.
Django's testing framework makes it relatively easy to write tests for your views, models, and forms.

from django.test import TestCase
from myapp.models import MyModel

class MyModelTestCase(TestCase):
    def setUp(self):
        MyModel.objects.create(name="Test Model")

    def test_model_name(self):
        test_model = MyModel.objects.get(name="Test Model")
        self.assertEqual(test_model.name, "Test Model")



Relative path" means using the path relative to the current working directory to define files rather than hard-coding the full path.
For some reason, projects tend to be moved around from time to time. This can be an absolute bear to deal with if you don't first plan ahead for
the possibility. If you don't use relative paths, the project will break if another person is working on the same project or the application is deployed 
to the server.

Unnecessary queries will always have adverse effects on database performance. Databases use foreign keys and many-to-many relationships to manage 
relationships between tables. select_related allows developers to fetch related objects in a foreign key relationship, while prefetch_related allows 
developers to fetch related objects in many to many or reverse foreign key relationships. These two methods will allow you to reduce the number of queries made to the database.


rom django.db import models
from django.urls import reverse

class MyModelName(models.Model):
    """A typical class defining a model, derived from the Model class."""

    # Fields
    my_field_name = models.CharField(max_length=20, help_text='Enter field documentation')
    # …

    # Metadata
    class Meta:
        ordering = ['-my_field_name']

    # Methods
    def get_absolute_url(self):
        """Returns the URL to access a particular instance of MyModelName."""
        return reverse('model-detail-view', args=[str(self.id)])

    def __str__(self):
        """String for representing the MyModelName object (in Admin site etc.)."""
        return self.my_field_name


While here we just have one text field for entering the team name, a form may have any number of other input elements and their associated labels. 
The field's type attribute defines what sort of widget will be displayed. The name and id of the field are used to identify the field in JavaScript/CSS/HTML,
while value defines the initial value for the field when it is first displayed. The matching team label is specified using the label tag (see "Enter name" above), with a for field containing the id value of the associated input.

The submit input will be displayed as a button by default. This can be pressed to upload the data in all the other input elements in the form to the server (in this case, just the team_name field).
The form attributes define the HTTP method used to send the data and the destination of the data on the server (action):

    action: The resource/URL where data is to be sent for processing when the form is submitted. If this is not set (or set to an empty string), then the form will be submitted back to the current page URL.
    method: The HTTP method used to send the data: post or get.
        The POST method should always be used if the data is going to result in a change to the server's database, because it can be made more resistant to cross-site forgery request attacks.
        The GET method should only be used for forms that don't change user data (for example, a search form). It is recommended for when you want to be able to bookmark or share the URL.

The role of the server is first to render the initial form state — either containing blank fields or pre-populated with initial values.
After the user presses the submit button, the server will receive the form data with values from the web browser and must validate the information. 
If the form contains invalid data, the server should display the form again, this time with user-entered data in "valid" fields and messages to describe 
the problem for the invalid fields. Once the server gets a request with all valid form data, it can perform an appropriate action (such as: saving the data,
returning the result of a search, uploading a file, etc.) and then notify the user.



Filter field_name and lookup_expr not configured

While field_name and lookup_expr are optional, it is recommended that you specify them. By default, if field_name is not specified, the filter’s name on the FilterSet class will be used. Additionally, lookup_expr defaults to exact. The following is an example of a misconfigured price filter:

class ProductFilter(django_filters.FilterSet):
    price__gt = django_filters.NumberFilter()

The filter instance will have a field name of price__gt and an exact lookup type. Under the hood, this will incorrectly be resolved as:

Product.objects.filter(price__gt__exact=value)

The above will most likely generate a FieldError. The correct configuration would be:

class ProductFilter(django_filters.FilterSet):
    price__gt = django_filters.NumberFilter(field_name='price', lookup_expr='gt')

When using filterset_fields, you can also add the lookup_expr in the dict of fields like so:

# ... ModelViewSet with DjangoFilterBackend in filter_backends ...

filterset_fields = {
    "price": ["gt", "exact"],
}

